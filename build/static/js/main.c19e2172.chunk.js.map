{"version":3,"sources":["assets/cire.jpg","components/buttons/ButtonText.tsx","components/AppBar.tsx","components/buttons/Button.tsx","components/buttons/ButtonAccent.tsx","components/buttons/ToggleButton.tsx","components/inputs/slider.tsx","components/visualizers/sortingAlgorithms/template.functions.ts","components/visualizers/sortingAlgorithms/MergeSort.tsx","components/visualizers/sortingAlgorithms/QuickSort.tsx","components/visualizers/sortingAlgorithms/HeapSort.ts","components/visualizers/sortingAlgorithms/ShellSort.ts","components/visualizers/sortingAlgorithms/InsertionSort.ts","components/visualizers/sortingAlgorithms/SelectionSort.ts","components/visualizers/SortingVisualizer.tsx","components/inputs/TextField.tsx","components/visualizers/searching/searchingAlgorithms.tsx","components/visualizers/searching/SearchingVisualizer.tsx","components/visualizers/pathFinding/NodeSquare.tsx","components/visualizers/pathFinding/dijkstra.tsx","components/visualizers/pathFinding/Algorithms.tsx","components/visualizers/pathFinding/PathFindingVisualizer.tsx","assets/tutorials/one.mp4","assets/tutorials/two.mp4","assets/tutorials/three.mp4","assets/tutorials/four.mp4","assets/tutorials/five.mp4","assets/tutorials/six.mp4","assets/tutorials/seven.mp4","assets/tutorials/eight.mp4","assets/tutorials/nine.mp4","components/user-tutorial/UserGuideWindow.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ButtonText","props","title","id","className","onClick","handleClick","style","opacity","disabled","pointerEvents","color","active","label","AppBar","useState","activeTab","set_activeTab","activeTabIndicator","n","handleChangeTab","Grid","container","width","position","margin","top","overflow","borderRadius","item","xs","md","Box","component","p","mt","ml","href","display","justifyContent","alignItems","value","mr","target","rel","Avatar","alt","src","cire","Button","padding","ButtonAccent","type","fontSize","ToggleButton","classN","toggleOn","on","set_on","e","height","Slider","onInput","prog","document","getElementById","handleInput","min","max","step","GREEN","PURPLE","RED","ACC","bars","getElementsByClassName","changeColor","index","COLOR","transition","backgroundColor","changeHeight","HEIGHT","arr","ANIMATION_SPEED","descend","animations","MergeSort","nums","speed","descending","callback","returnFrames","divide","Object","assign","length","x","setTimeout","animate","left","right","mid","Math","floor","leftsize","rightsize","leftsub","slice","rightsub","i","j","k","push","merge","mainArray","isDescending","CHANGE","REVERT","SWAP_CHANGE","SWAP_REVERT","sort","midIndex","DIVIDING_POINT","PIVOT","temporary","partition_descending","partition_ascending","QuickSort","numbers","STATE","VALUE_1","VALUE_2","HeapSort","animation_speed","halfSize","heapify","temp","size","root","ShellSort","Array","gap","InsertionSort","y","first","SortingVisualizer","algoOptionsOpen","set_algoOptionsOpen","chosenAlgo","set_chosenAlgo","sortingSpeed","set_sortingSpeed","sortDisabled","set_sortDisabled","generateBtn_disabled","set_generateBtn_disabled","arraySizeButton","set_arraySizeButton","sortSpeed","set_sortSpeed","set_descending","disableDescending","set_disableDescending","sortingAlgoList","arraySize","set_arraySize","generateRandom","array","random","randomNumbers","set_randomNumbers","enablePanels","t","hidden","pl","map","algo","flex","num","m","flexDirection","alignContent","pb","textAlign","changeArraySize","changeSpeed","bottom","indexOf","min_idx","SelectionSort","BubbleSort","memo","TextInput","placeholder","placeHolder","autoFocus","autofocus","event","error","fullWidth","LINEAR_SEARCH_ANIMATIONS","BINARY_SEARCH_ANIMATIONS","getAnimations","searchItem","newFrame","state","lookupIndex","steps","fill_LinearAnimationFrames","sortedArray","binSearch","a","b","fill_BinaryAnimationFrames","lowerBound","upperBound","NoOfSteps","midElement","SearchingVisualizer","searchSize","setSearchSize","setsearchItem","searchArray","setSearchArray","searchSpeed","setSearchSpeed","SortedsearchArray","useRef","sorted","linearSearchMessage","set_linearSearchMessage","binarySearchMessage","set_binarySearchMessage","linearMessageColor","setLinearMessageColor","binaryMessageColor","setBinaryMessageColor","timeouts","lfound","setlfound","bfound","setbfound","animationFrames","CLASSNAME","numberOfFrames","frame","red","executeFrame","changeMessage","ms","items","useEffect","current","each","idx","newSize","alert","ANIMATIONS","LINEAR_ANIMATION","BINARY_ANIMATION","binarySearchWorstTime","log2","clearTimeout","NodeSquare","mouseIsDown","useContext","mouseDownContext","isStart","start","set_start","isFinish","finish","set_finish","classname","box","clearPath","onMouseEnter","s","f","onDragOver","preventDefault","onDrop","prev","classList","add","remove","changeStart","changeFinish","setAttribute","onDragStart","changePrev","MouseDown","obs","contains","ctrlKey","onMouseDown","onMouseUp","console","log","draggable","nodes","setDistance","distance","toString","getDistance","getAttribute","parseInt","isObstacle","getNeighbors","up","down","neighbors","setParent","parent","getParent","parentIndex","backTrack","frames","dijkstra","startIdx","goalIdx","resetNodes","visited","queue","curNode","shift","curID","curNodeID","curDistance","newDistance","node","data","this","undefined","Algorithms","end","animationId","pathStart","pathAnimation","bfs","depth","boxes","Set","startNode","front","pop","has","newNode","createContext","PathFindingVisualizer","algoOptionsDropdown","set_algoOptionsDropdown","name","activeAlgo","setActiveAlgo","setSpeed","algortihms","addBorderWalls","setNodes","setStart","setFinish","prevNode","setPrevNode","isMouseDown","set_isMouseDown","findThePath","en","instant","clearVisited","window","animatePath","handleChangeStart","handleChangeFinish","useMemo","hey","clearObstacles","querySelectorAll","algoOptions","border","makeObstacle","createMaze","halfLen","halfHeight","lmid","hmid","randomX","remainingY","randomY","remainingX","Provider","pr","aria-label","onChange","clearWeights","React","UserGuideWindow","TUTORIAL_INTRO","SET_TUTORIAL_INTRO","TUTORIAL_DATA","source","one","two","three","four","five","six","seven","eight","nine","ACTIVE_WINDOW","SET_ACTIVE_WINDOW","changeWindow","newIndex","handleSkip","checked","localStorage","setItem","loop","autoPlay","muted","App","currentOpenTab","set_currentOpenTab","tutorialHidden","set_tutorialHidden","getItem","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.c19e2172.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/cire.d12f8180.jpg\";","export default function ButtonText(props: any)\n{\n    return (\n        <button \n            title={props.title} \n            id={props.id}\n            className={\"btn text-btn\"} \n            onClick={props.handleClick}\n            style={{opacity: props.disabled ? '.4' : '1', \n                    pointerEvents: props.disabled ? 'none':'visible',\n                    color: (props.active ? '#0AFFEF': 'white')}}\n            >\n                \n                {props.label}\n        </button>\n    )\n}","import {Box, Grid} from '@material-ui/core';\nimport {useState} from 'react';\n\nimport cire from '../assets/cire.jpg';\n\nimport ButtonText from './buttons/ButtonText';\nimport Avatar from '@material-ui/core/Avatar';\n\nexport default function AppBar (props: any) {\n\n   const [activeTab, set_activeTab] = useState(0);\n\n   function activeTabIndicator (n: number) {\n      set_activeTab(n);\n      props.handleChangeTab(n);\n   }\n\n   return (\n      <Grid\n         container\n         className=\"flat-big f-color1\"\n         style={{\n            width: '98vw', position: 'relative',\n            margin: 'auto', top: '1rem', overflow: 'hidden',\n            borderRadius: '10px'\n         }}\n      >\n         <Grid\n            item xs={6} md={2}\n         >\n            <Box component=\"h2\" p={1} mt={2} ml={1}>\n               <a href=\"https://github.com/CodingForTheBetter\"> Algo Visualizer </a>\n            </Box>\n         </Grid>\n\n         <Grid\n            item xs={12} md={8}\n         >\n            <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" mt={1}>\n               <ButtonText active={activeTab === 0} handleClick={() => activeTabIndicator(0)} className=\"app-tabs\" label=\"Sorting\" id=\"sort-v-btn\" value=\"0\" />\n               <ButtonText active={activeTab === 1} handleClick={() => activeTabIndicator(1)} className=\"app-tabs\" label=\"Searching\" id=\"search-v-btn\" value=\"1\" />\n            </Box>\n\n         </Grid>\n\n         <Grid\n            item xs={4} md={2}\n            className=\"abs-right\"\n         >\n            <Box p={1} mt={1} mr={1}>\n               <a title=\"Jump Search\" href=\"https://searchalgorithms.netlify.app/\" target=\"_blank\" rel=\"noreferrer\">\n                  <Avatar\n                     alt=\"Jump Search\" src={cire}\n                     className=\"avatar\" />\n               </a>\n            </Box>\n         </Grid>\n      </Grid>\n   );\n}","export default function Button(props: any)\n{\n\n    return (\n        <button \n            title={props.title} \n            id={props.id}\n            className={\"oval flat btn b-accent \"} \n            onClick={props.handleClick}\n            style={{opacity: props.disabled ? '.4' : '1', \n                    pointerEvents: props.disabled ? 'none' : 'visible',\n                    padding: '.2rem 1.7rem'}}\n            >\n                {props.label}\n        </button>\n    )\n}","\nexport default function ButtonAccent(props: any)\n{\n    return (\n        <button \n            title={props.title} \n            id={props.id}\n            className={\"oval flat btn \" + props.type} \n            onClick={props.handleClick}\n            style={{opacity: props.disabled ? '.4' : '1', \n                    pointerEvents: props.disabled ? 'none':'visible',\n                    padding: '0 2rem',\n                    borderRadius: '30px',\n                color: props.type === \"error\" ? 'white' : '$b-prime',\n                fontSize: '1.2rem'\n            }}>\n\n                {props.label}\n        </button>\n    )\n}","import {useState} from 'react';\n\nexport default function ToggleButton(props: any)\n{\n    const [on, set_on] = useState(props.toggleOn);\n\n    function handleClick(event: any) {\n        set_on(!on);\n        props.handleClick();\n    }\n\n    let classN;\n    if(!on) classN = \"oval thin-inset toggle-btn \";\n    else classN = \"oval thin-inset toggle-btn-on \" + props.color;\n\n    return(\n        <div\n            title={props.title}\n            className={classN}\n            id={props.id}\n            onClick={(e) => handleClick(e)}\n            style={{width: '50px', height: '16px',\n                    opacity: props.disabled ? '.4' : '1',\n                    pointerEvents: props.disabled ? 'none':'visible'}}\n            >   \n        </div>\n    )\n}","export default function Slider(props: any)\n{   \n    function handleInput(e: any) {\n        const value = e.target.value;\n        let prog = document.getElementById(props.id);        \n        if(prog) {\n            prog.style.width = (value/2) + \"px\";\n        }\n        props.onInput(value);\n    }\n\n    return(\n        <div \n            className=\"d-inline relative slider\"\n            style={{\n                opacity: props.disabled ? '.4' : '1',\n                pointerEvents: props.disabled ? 'none' : 'visible',\n                overflow: 'hidden',\n                padding: '.5rem'\n            }}\n            >\n                <input \n                    onInput={(e) => handleInput(e)}\n                    className={\"slider-\" + props.color} \n                    type=\"range\" \n                    min={props.min}\n                    max={props.max} \n                    value={props.value}\n                    title={props.title}\n                    step='1'\n                    style={{width: (props.max/2) + \"px\"}}\n                    />\n                <div className={\"slider-progress-\" + props.color} id={props.id}></div>\n        </div>  \n    )\n}","export const GREEN = \"yellowgreen\";\nexport const PURPLE = \"purple\";\nexport const RED = \"#dd6f74\";\nexport const ACC = \"#0AFFEF\";\nexport const GREY = \"rgba(255,255,255,.4)\";\n// actual array bars on the screen\nlet bars = (document.getElementsByClassName('bars') as HTMLCollectionOf<HTMLElement>)\n\nexport function changeColor(index: number, COLOR: string)\n{    \n    if (bars[index]) {\n        bars[index].style.transition = '0ms';\n        bars[index].style.backgroundColor = COLOR;\n    } \n}\n\nexport function changeHeight(index: number, HEIGHT: number)\n{\n    if (bars[index]) bars[index].style.height = HEIGHT+\"px\";\n}","import { changeColor, changeHeight, PURPLE, ACC } from './template.functions';\nlet arr = [] as number[];\n// this will be updated using the props\nlet ANIMATION_SPEED = 40;\nlet descend = false;\n// containers of Animation Sequence\nlet animations = [] as any;\n// The function below is where the animation happens\n// the sequence divided for every triplet\n// the first of the triplet is when the values are being compared thus changing its color\n// the second of the tripled is when the values compared and revert its original color\n// you can better notice that in smaller array\n// finally, the third of the triplet is where the changing the height of a bar\n\n// ======================== ANIMATE =======================\nfunction animate() {\n   for (let x = 0; x < animations.length; x++) {\n      // change the color if the current iteration is not the third of the triplet\n      // example 1: if x = 0 then x % 3 = 0 and not 2 then change the color.\n      // example 2: if x = 1 then x % 3 = 0 and not 2 then revert the original color.\n      // example 3: if x = 2 then x % 3 = 2 then change the size;\n      const isColorChange = x % 3 !== 2;\n      if (isColorChange) {\n         const color = x % 3 === 0 ? PURPLE : ACC;\n         setTimeout(() => {\n            changeColor(animations[x][0], color);\n            changeColor(animations[x][1], color);\n\n         }, x * ANIMATION_SPEED);\n      }\n      // else change the height\n      else {\n         setTimeout(() => {\n            changeHeight(animations[x][0], animations[x][1]);\n         }, (x) * (ANIMATION_SPEED));\n      }\n   }\n}\n// ======================== entry point =======================\nexport default function MergeSort(nums: number[], speed: number, descending: boolean, callback: Function, returnFrames?: boolean) {\n   ANIMATION_SPEED = 200 - speed;\n   descend = descending;\n   animations = [];\n   arr = Object.assign([], nums);\n   // call the actual merge Sort to push all the animations\n   divide(0, arr.length - 1);\n\n   if (returnFrames) return animations;\n\n   // actual animation\n   animate();\n   callback(animations.length)\n}\n\n// ====================== MERGE SORT DIVIDE ============================\nfunction divide(left: number, right: number) {\n   if (left >= right)\n      return;\n   const mid = Math.floor((right + left) / 2)\n   // left half\n   divide(left, mid)\n   // right helf\n   divide(mid + 1, right)\n   // merge left and right\n   merge(left, mid, right);\n}\n// ====================== MERGE SORT COMBINE ============================\nfunction merge(left: number, mid: number, right: number) {\n   const leftsize = mid - left + 1;\n   const rightsize = right - mid;\n   const leftsub = arr.slice(left, mid + 1);\n   const rightsub = arr.slice(mid + 1);\n   let i = 0;\n   let j = 0;\n   let k = left;\n   while (i < leftsize && j < rightsize) {\n      // push two animations for color changes\n      animations.push([k, (left + leftsize) + j]);\n      // push the second time to revert the color\n      animations.push([k, (left + leftsize) + j]);\n      if (descend) {\n         if (leftsub[i] > rightsub[j]) {\n            // push the Height changes\n            animations.push([k, leftsub[i]]);\n            arr[k] = leftsub[i];\n            i++; k++;\n         }\n         else {\n            // push the Height changes\n            animations.push([k, rightsub[j]]);\n            arr[k] = rightsub[j];\n            j++; k++;\n         }\n         continue;\n      }\n      if (leftsub[i] < rightsub[j]) {\n         // push the Height changes\n         animations.push([k, leftsub[i]]);\n         arr[k] = leftsub[i];\n         i++; k++;\n      }\n      else {\n         // push the Height changes\n         animations.push([k, rightsub[j]]);\n         arr[k] = rightsub[j];\n         j++; k++;\n      }\n   }\n   while (i < leftsize) {\n      // here we should push a TRIPLET to maintain the ratio of the animatino sequence\n      animations.push([left + i, left + i]);\n      animations.push([left + i, left + i]);\n      animations.push([k, leftsub[i]]);\n\n      arr[k] = leftsub[i];\n      i++;\n      k++;\n   }\n\n   while (j < rightsize) {\n      animations.push([right + j, right + j]);\n      animations.push([right + j, right + j]);\n      animations.push([k, rightsub[j]]);\n\n      arr[k] = rightsub[j];\n      j++;\n      k++;\n   }\n}\n","// `\n// ANIMATION STRATEGY: \n//     Each iteraton in animations array is also an array\n//     that has 3 elements. \n// Examples:\n//      [CHANGE, index, pivot],\n//      [REVERT, index, pivot],\n//      [SWAP_CHANGE, index1, index2],\n//      [SWAP_REVERT, index1, index2]\n// Basically, this means that if we found a CHANGE,\n// we will change the color of the bars[index],\n// if we found a REVERT then change its color back to normal,\n// if SWAP_CHANGE, change their colors and swap. \n// That means that the height of bars[inde1] will be the \n// height of bars[index2] and vice versa.\n// Finally, if we found SWAP_REVERT we will just simply \n// change the color back to normal\n// `\n\nimport {\n    changeColor,\n    changeHeight,\n    PURPLE,\n    RED,\n    GREEN,\n    ACC\n} from './template.functions';\n\n//  ======================================== DEPENDENT  VARIABLES <<<\nlet mainArray = [] as number[];\n// this will be updated using the props\nlet ANIMATION_SPEED = 40;\n// containers of Animation Sequence\nlet animations = [] as any;\nlet isDescending = false;\n\n// ========================================= INDEPENDENT VARIABLES\n// this will be use for identifyig \n// animation sequences\nconst CHANGE = \"change\";\nconst REVERT = \"revert\";\nconst SWAP_CHANGE = \"swap_change\";\nconst SWAP_REVERT = \"swap_revert\";\n\n// ==================================================== ANIMATION animate()\nfunction animate() {\n    for (let x = 0; x < animations.length; x++) {\n        const STATE = animations[x][0];\n        const VALUE_1 = animations[x][1];\n        const VALUE_2 = animations[x][2];\n        if (STATE === CHANGE) {\n            setTimeout(() => {\n                changeColor(VALUE_1, PURPLE);\n                changeColor(VALUE_2, RED);\n            }, x * ANIMATION_SPEED);\n        }\n        else if (STATE === REVERT) {\n            setTimeout(() => {\n                changeColor(VALUE_1, ACC);\n                changeColor(VALUE_2, ACC);\n            }, x * ANIMATION_SPEED);\n        }\n        else if (STATE === SWAP_CHANGE) {\n            setTimeout(() => {\n                changeColor(VALUE_1, GREEN);\n                changeColor(VALUE_2, GREEN);\n                changeHeight(VALUE_1, mainArray[VALUE_1]);\n                changeHeight(VALUE_2, mainArray[VALUE_2]);\n            }, x * ANIMATION_SPEED);\n        }\n        else {\n            setTimeout(() => {\n                changeColor(VALUE_1, ACC);\n                changeColor(VALUE_2, ACC);\n            }, x * ANIMATION_SPEED);\n        }\n    }\n}\n\n// ===================================================== PARTITION DESCENDING\nfunction partition_descending(left: number, right: number, PIVOT: number) {    \n    while (left <= right) {\n        // here we will push the animation comparision\n        // example: animation.comparision.push([left, right])\n        // because we are comparing left and right\n        while (mainArray[left] > PIVOT){\n            animations.push([\n                CHANGE,\n                left,\n                PIVOT\n            ])\n            animations.push([\n                REVERT,\n                left,\n                PIVOT\n            ])\n            left++;\n        }\n        while (mainArray[right] < PIVOT){\n            animations.push([\n                CHANGE,\n                right,\n                PIVOT\n            ])\n            animations.push([\n                REVERT,\n                right,\n                PIVOT\n            ])\n            right--; \n        }\n        if (left <= right) {\n            animations.push([\n                SWAP_CHANGE,\n                left,\n                right\n            ])\n            animations.push([\n                SWAP_REVERT,\n                left,\n                right\n            ])\n            // here I'm swapping left and aright\n            let temporary = mainArray[left];\n            mainArray[left] = mainArray[right];\n            mainArray[right] = temporary;\n\n            left++;\n            right--;\n        }\n    }\n    return left;\n}\n\n// ===================================================== PARTITION ASCENDING\nfunction partition_ascending(left: number, right: number, PIVOT: number) {    \n    while (left <= right) {\n        // here we will push the animation comparision\n        // example: animations.comparision.push([left, right])\n        // because we are comparing left and right\n        while (mainArray[left] < PIVOT) {\n            animations.push([\n                CHANGE,\n                left,\n                PIVOT\n            ])\n            animations.push([\n                REVERT,\n                left,\n                PIVOT\n            ])\n            left++;\n        }\n            \n        while (mainArray[right] > PIVOT) {\n            animations.push([\n                CHANGE,\n                right,\n                PIVOT\n            ])\n            animations.push([\n                REVERT,\n                right,\n                PIVOT\n            ])\n            right--; \n        }\n               \n        if (left <= right) {\n            animations.push([\n                SWAP_CHANGE,\n                left,\n                right\n            ])\n            animations.push([\n                SWAP_REVERT,\n                left,\n                right\n            ])\n            // here I'm swapping left and aright\n            let temporary = mainArray[left];\n            mainArray[left] = mainArray[right];\n            mainArray[right] = temporary;\n            left++;\n            right--;\n        }\n    }\n    return left;\n}\n\n// ===================================================== SORT\nfunction sort(left: number, right: number) {\n    if (left >= right)\n        return;\n    // here I choose the middle element as a PIVOT\n    let midIndex = (left + right) / 2;\n    // console.log(midIndex);\n    // make sure to always floor the mid to avoid infinite loop\n    midIndex = Math.floor(midIndex);\n    let PIVOT = mainArray[midIndex];\n    // here, partition should return the index of the pivot \n    // or the element that is already in correct position\n    let DIVIDING_POINT: number;\n    if(isDescending)\n        DIVIDING_POINT = partition_descending(left, right, PIVOT);\n    else\n        DIVIDING_POINT = partition_ascending(left, right, PIVOT);\n    sort(left, DIVIDING_POINT - 1);\n    sort(DIVIDING_POINT, right);\n}\n\n// ================================================== ENTRY POINT\nexport default function QuickSort(\n    numbers: number[],\n    speed: number,\n    descending: boolean,\n    callback: Function,\n    returnFrames?: boolean)\n{\n    ANIMATION_SPEED = 200 - speed;\n    isDescending = descending;  \n    mainArray = Object.assign([], numbers);\n    // always clear the animations \n    animations = [];\n    // ACTUAL QUICK SORT CALL\n\n    sort(0, mainArray.length - 1);\n    if (returnFrames) return animations;\n    animate();\n    callback(animations.length);\n}","import {\n    changeColor,\n    changeHeight,\n    ACC, RED, PURPLE, GREEN\n}\n    from './template.functions'\n\n// ======================================= dependent Variables\nlet mainArray = [] as number[];\n// this will be updated using the props\nlet ANIMATION_SPEED = 40;\n// containers of Animation Sequence\nlet animations = [] as any;\nlet isDescending = false;\n\n// ======================================= constants Variables\n// this will be use for identifyig \n// animation sequences\nconst CHANGE = \"change\";\nconst REVERT = \"revert\";\nconst SWAP_CHANGE = \"swap_change\";\nconst SWAP_REVERT = \"swap_revert\";\n\n// ======================================= ENTRY POINT\nexport default function HeapSort(\n    numbers: number[],\n    animation_speed: number,\n    descending: boolean,\n    callback: Function,\n    returnFrames?: boolean\n)\n{\n    ANIMATION_SPEED = 200 - animation_speed;\n    isDescending = descending;\n    mainArray = Object.assign([], numbers);\n    animations = [];\n    // actual call of heapsort algorithm\n    sort();\n    if (returnFrames) return animations;\n    // animate\n    animate();\n    callback(animations.length)\n}\n\n// ======================================== animation \nfunction animate() {\n    \n    for (let x = 0; x < animations.length; x++) {\n        const STATE = animations[x][0];\n        const VALUE_1 = animations[x][1];\n        const VALUE_2 = animations[x][2];\n        if (STATE === CHANGE) {\n            setTimeout(() => {\n                changeColor(VALUE_1, PURPLE);\n                changeColor(VALUE_2, RED);\n            }, x * ANIMATION_SPEED);\n        }\n        else if (STATE === REVERT) {\n            setTimeout(() => {\n                changeColor(VALUE_1, ACC);\n                changeColor(VALUE_2, ACC);\n            }, x * ANIMATION_SPEED);\n        }\n        else if (STATE === SWAP_CHANGE) {\n            setTimeout(() => {\n                changeColor(VALUE_1, GREEN);\n                changeColor(VALUE_2, GREEN);\n                changeHeight(VALUE_1, mainArray[VALUE_1]);\n                changeHeight(VALUE_2, mainArray[VALUE_2]);\n            }, x * ANIMATION_SPEED);\n        }\n        else {\n            setTimeout(() => {\n                changeColor(VALUE_1, ACC);\n                changeColor(VALUE_2, ACC);\n            }, x * ANIMATION_SPEED);\n        }\n    }\n}\n\n\n// ======================================== Sort\nfunction sort() {\n    let halfSize = mainArray.length / 2;\n    halfSize = Math.floor(halfSize);\n    \n    for (let x = halfSize; x >= 0; x--) {\n        heapify(mainArray.length, x);\n    }\n    for (let x = mainArray.length - 1; x > 0; x--)\n    {\n        animations.push([SWAP_CHANGE, x, 0])\n        animations.push([SWAP_REVERT, x, 0])\n        const temp = mainArray[0];\n        mainArray[0] = mainArray[x]\n        mainArray[x] = temp;\n        heapify(x, 0);\n    }\n}\n\nfunction heapify(size: number, root: number) {\n    if (root >= size)\n        return;\n\n    let left = (2 * root) + 1;\n    let right = (2 * root) + 2;\n\n    if (left < size) {\n        // comparision\n        animations.push([CHANGE, left, root])\n        animations.push([REVERT, left, root])\n\n        if (!isDescending) {\n            if (mainArray[left] > mainArray[root]) {    \n\n                animations.push([SWAP_CHANGE, left, root])\n                animations.push([SWAP_REVERT, left, root])\n\n                const temp = mainArray[left];\n                mainArray[left] = mainArray[root];\n                mainArray[root] = temp;\n            }    \n        }\n        else {\n            if (mainArray[left] < mainArray[root]) {\n\n                animations.push([SWAP_CHANGE, left, root])\n                animations.push([SWAP_REVERT, left, root])\n               \n                const temp = mainArray[left];\n                mainArray[left] = mainArray[root];\n                mainArray[root] = temp;\n            }\n        }\n            \n    }\n    if (right < size) {\n        // comparision\n        animations.push([CHANGE, right, root])\n        animations.push([REVERT, right, root])\n        if (!isDescending) {\n          \n            if (mainArray[right] > mainArray[root]) {\n\n                animations.push([SWAP_CHANGE, right, root])\n                animations.push([SWAP_REVERT, right, root])\n               \n                const temp = mainArray[right];\n                mainArray[right] = mainArray[root];\n                mainArray[root] = temp;\n            }\n        }\n        else {\n            if (mainArray[right] < mainArray[root]) {\n\n                animations.push([SWAP_CHANGE, right, root])\n                animations.push([SWAP_REVERT, right, root])\n                \n                const temp = mainArray[right];\n                mainArray[right] = mainArray[root];\n                mainArray[root] = temp;\n            }\n        }\n    }\n    heapify(size, left);\n    heapify(size, right);\n}","import {\n    changeColor,\n    changeHeight,\n    ACC, RED, PURPLE, GREEN\n}\n    from './template.functions'\n\n// ======================================= dependent Variables\nlet ANIMATION_SPEED = 40;\nlet mainArray = [] as any;\n// containers of Animation Sequence\nlet animations = [] as any;\n\n// ======================================= constants \n// this will be use for identifyig \n// animation sequences\nconst CHANGE = \"change\";\nconst REVERT = \"revert\";\nconst SWAP_CHANGE = \"swap_change\";\nconst SWAP_REVERT = \"swap_revert\";\n\n// =========================================== ANIMATE\n\nfunction animate() {\n    \n    for (let x = 0; x < animations.length; x++) {\n        const STATE = animations[x][0];\n        const VALUE_1 = animations[x][1];\n        const VALUE_2 = animations[x][2];\n        if (STATE === CHANGE) {\n            setTimeout(() => {\n                changeColor(VALUE_1, PURPLE);\n                changeColor(VALUE_2, RED);\n            }, x * ANIMATION_SPEED);\n        }\n        else if (STATE === REVERT) {\n            setTimeout(() => {\n                changeColor(VALUE_1, ACC);\n                changeColor(VALUE_2, ACC);\n            }, x * ANIMATION_SPEED);\n        }\n        else if (STATE === SWAP_CHANGE) {\n            setTimeout(() => {\n                changeColor(VALUE_1, GREEN);\n                changeColor(VALUE_2, GREEN);\n                changeHeight(VALUE_1, mainArray[VALUE_1]);\n                changeHeight(VALUE_2, mainArray[VALUE_2]);\n            }, x * ANIMATION_SPEED);\n        }\n        else {\n            setTimeout(() => {\n                changeColor(VALUE_1, ACC);\n                changeColor(VALUE_2, ACC);\n            }, x * ANIMATION_SPEED);\n        }\n    }\n}\n\n\n// =========================================== ENTRY POINT\nexport default function ShellSort(\n    nums: number[],\n    speed: number,\n    descending: boolean,\n    callback: Function,\n    returnFrames?: boolean )\n{\n    mainArray = new Array(nums.length)\n    mainArray = Object.assign([], nums )\n\n    ANIMATION_SPEED = 200 - speed;\n    animations = [];\n\n    // actual algo\n    let gap = Math.floor(mainArray.length / 2);\n    while ( gap >= 1) {\n        for (let j = gap; j < mainArray.length; j++) {\n            for (let i = j - gap; i >= 0; i -= gap) {\n\n                animations.push([CHANGE, i+gap, i])\n                animations.push([REVERT, i+gap, i])\n\n                if (!descending) {\n                    if (mainArray[i + gap] > mainArray[i]) break;    \n                }else\n                    if (mainArray[i + gap] < mainArray[i]) break;    \n                \n                animations.push([SWAP_CHANGE, i+gap, i])\n                animations.push([SWAP_REVERT, i+gap, i])\n\n                const temp = mainArray[i + gap]\n                mainArray[i + gap] = mainArray[i]\n                mainArray[i] = temp;\n            }\n        }\n        gap = Math.floor(gap / 2)\n    }\n\n    if (returnFrames) return animations;\n    animate();\n    callback(animations.length);\n}","import {\n    changeColor,\n    changeHeight,\n    ACC, RED, PURPLE, GREEN\n}\n    from './template.functions'\n\n// ======================================= dependent Variables\nlet ANIMATION_SPEED = 40;\nlet mainArray = [] as any;\n// containers of Animation Sequence\nlet animations = [] as any;\n\n// ======================================= constants \n// this will be use for identifyig \n// animation sequences\nconst CHANGE = \"change\";\nconst REVERT = \"revert\";\nconst SWAP_CHANGE = \"swap_change\";\nconst SWAP_REVERT = \"swap_revert\";\n\n// =========================================== ANIMATE\n\nfunction animate() {\n    \n    for (let x = 0; x < animations.length; x++) {\n        const STATE = animations[x][0];\n        const VALUE_1 = animations[x][1];\n        const VALUE_2 = animations[x][2];\n        if (STATE === CHANGE) {\n            setTimeout(() => {\n                changeColor(VALUE_1, PURPLE);\n                changeColor(VALUE_2, RED);\n            }, x * ANIMATION_SPEED);\n        }\n        else if (STATE === REVERT) {\n            setTimeout(() => {\n                changeColor(VALUE_1, ACC);\n                changeColor(VALUE_2, ACC);\n            }, x * ANIMATION_SPEED);\n        }\n        else if (STATE === SWAP_CHANGE) {\n            setTimeout(() => {\n                changeColor(VALUE_1, GREEN);\n                changeColor(VALUE_2, GREEN);\n                changeHeight(VALUE_1, mainArray[VALUE_1]);\n                changeHeight(VALUE_2, mainArray[VALUE_2]);\n            }, x * ANIMATION_SPEED);\n        }\n        else {\n            setTimeout(() => {\n                changeColor(VALUE_1, ACC);\n                changeColor(VALUE_2, ACC);\n            }, x * ANIMATION_SPEED);\n        }\n    }\n}\n\n\n// =========================================== ENTRY POINT\nexport default function InsertionSort(\n    nums: number[],\n    speed: number,\n    descending: boolean,\n    callback: Function,\n    returnFrames?: boolean) \n{\n    mainArray = new Array(nums.length)\n    mainArray = Object.assign([], nums )\n\n    ANIMATION_SPEED = 200 - speed;\n    animations = [];\n\n    // actual algo\n    let size = mainArray.length;\n    for (let x = 1; x < size; x++)\n    {\n        animations.push([CHANGE, x, x-1])\n        animations.push([REVERT, x, x-1])\n\n        if (!descending) {\n            if (mainArray[x - 1] > mainArray[x])\n            {\n                for (let y = x; y > 0; y--)\n                {\n                    animations.push([CHANGE, y, y-1])\n                    animations.push([REVERT, y, y-1])\n\n                    if (mainArray[y] < mainArray[y - 1]) {\n\n                        animations.push([SWAP_CHANGE, y, y-1])\n                        animations.push([SWAP_REVERT, y, y-1])\n\n                        const temp = mainArray[y];\n                        mainArray[y] = mainArray[y - 1]\n                        mainArray[y - 1] = temp\n                    }\n                }\n            }            \n        }\n        else {\n            if (mainArray[x - 1] < mainArray[x])\n            {\n                for (let y = x; y > 0; y--)\n                {\n                    animations.push([CHANGE, y, y-1])\n                    animations.push([REVERT, y, y-1])\n\n                    if (mainArray[y] > mainArray[y - 1]) {\n\n                        animations.push([SWAP_CHANGE, y, y-1])\n                        animations.push([SWAP_REVERT, y, y-1])\n\n                        const temp = mainArray[y];\n                        mainArray[y] = mainArray[y - 1]\n                        mainArray[y - 1] = temp\n                    }\n                }\n            }\n        }\n    }\n\n    if (returnFrames) return animations;\n    animate();\n    callback(animations.length)\n}\n    ","import {\n    changeColor,\n    changeHeight,\n    ACC, RED, PURPLE, GREEN\n}\n    from './template.functions'\n\n// ======================================= dependent Variables\nlet ANIMATION_SPEED = 40;\nlet mainArray = [] as any;\n// containers of Animation Sequence\nlet animations = [] as any;\n\n// ======================================= constants \n// this will be use for identifyig \n// animation sequences\nconst CHANGE = \"change\";\nconst REVERT = \"revert\";\nconst SWAP_CHANGE = \"swap_change\";\nconst SWAP_REVERT = \"swap_revert\";\n\n// =========================================== ANIMATE\n\nfunction animate() {\n    \n    for (let x = 0; x < animations.length; x++) {\n        const STATE = animations[x][0];\n        const VALUE_1 = animations[x][1];\n        const VALUE_2 = animations[x][2];\n        if (STATE === CHANGE) {\n            setTimeout(() => {\n                changeColor(VALUE_1, PURPLE);\n                changeColor(VALUE_2, RED);\n            }, x * ANIMATION_SPEED);\n        }\n        else if (STATE === REVERT) {\n            setTimeout(() => {\n                changeColor(VALUE_1, ACC);\n                changeColor(VALUE_2, ACC);\n            }, x * ANIMATION_SPEED);\n        }\n        else if (STATE === SWAP_CHANGE) {\n            setTimeout(() => {\n                changeColor(VALUE_1, GREEN);\n                changeColor(VALUE_2, GREEN);\n                changeHeight(VALUE_1, mainArray[VALUE_1]);\n                changeHeight(VALUE_2, mainArray[VALUE_2]);\n            }, x * ANIMATION_SPEED);\n        }\n        else {\n            setTimeout(() => {\n                changeColor(VALUE_1, ACC);\n                changeColor(VALUE_2, ACC);\n            }, x * ANIMATION_SPEED);\n        }\n    }\n}\n\n\n// =========================================== ENTRY POINT\nexport default function SelectionSort(\n    nums: number[],\n    speed: number,\n    descending: boolean,\n    callback: Function,\n    returnFrames?: boolean)\n{\n    mainArray = new Array(nums.length)\n    mainArray = Object.assign([], nums)\n\n    ANIMATION_SPEED = 200 - speed;\n    animations = [];\n\n    // act ual algo\n    let size = mainArray.length\n    var i: number, j: number, min_idx: number;\n\n    for (i = 0; i < size - 1; i++)\n    {\n        min_idx = i;\n\n        for (j = i + 1; j < size; j++) {\n            \n            animations.push([CHANGE, j, min_idx])\n            animations.push([REVERT, j, min_idx])\n            if (descending) {\n                if (mainArray[j] > mainArray[min_idx]) min_idx = j;\n            }\n            else {\n                if (mainArray[j] < mainArray[min_idx]) min_idx = j;\n            }\n        }\n        animations.push([SWAP_CHANGE, i, min_idx])\n        animations.push([SWAP_REVERT, i, min_idx])\n\n        const temp = mainArray[min_idx]\n        mainArray[min_idx] = mainArray[i]\n        mainArray[i] = temp;\n    }\n    // animations start\n    if (returnFrames) return animations;\n    animate();\n    callback(animations.length)    \n}\n\nexport function BubbleSort(\n    nums: number[],\n    speed: number,\n    descending: boolean,\n    callback: Function,\n    returnFrames?: boolean)\n{\n    mainArray = new Array(nums.length)\n    mainArray = Object.assign([], nums)\n\n    ANIMATION_SPEED = 200 - speed;\n    animations = [];\n\n    // act ual algo\n    let size = mainArray.length\n\n    for (let i = 0; i < size - 1; i++)\n    {\n        for (let j = i + 1; j < size; j++) {\n\n            animations.push([CHANGE, i, j])\n            animations.push([REVERT, i, j])\n\n            if (!descending) {\n                if (mainArray[i] > mainArray[j]) {\n                    animations.push([SWAP_CHANGE, i, j])        \n                    animations.push([SWAP_REVERT, i, j])  \n                    const temp = mainArray[i]      \n                    mainArray[i] = mainArray[j]\n                    mainArray[j] = temp;\n                }\n            }\n            else {\n                if (mainArray[i] < mainArray[j]) {\n                    animations.push([SWAP_CHANGE, i, j])        \n                    animations.push([SWAP_REVERT, i, j])   \n                    const temp = mainArray[i]     \n                    mainArray[i] = mainArray[j]\n                    mainArray[j] = temp;\n                }\n            }\n        }\n    }\n    // animations start\n    if (returnFrames) return animations;\n    animate();\n    callback(animations.length)    \n}","import { useState, memo } from 'react';\nimport { Box } from '@material-ui/core';\nimport Button from '../../components/buttons/Button';\nimport ButtonAccent from '../../components/buttons/ButtonAccent';\nimport ToggleButton from '../../components/buttons/ToggleButton';\nimport Slider from '../../components/inputs/slider';\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\n\n// Algorithms\nimport MergeSort from './sortingAlgorithms/MergeSort';\nimport QuickSort from './sortingAlgorithms/QuickSort';\nimport HeapSort from './sortingAlgorithms/HeapSort';\nimport ShellSort from './sortingAlgorithms/ShellSort';\nimport InsertionSort from './sortingAlgorithms/InsertionSort';\nimport SelectionSort from './sortingAlgorithms/SelectionSort';\nimport { BubbleSort } from './sortingAlgorithms/SelectionSort';\n\n// this indicates that the page loads for the first time\nlet first = true;\nfunction SortingVisualizer(props: any): JSX.Element {\n\n   const [algoOptionsOpen, set_algoOptionsOpen] = useState(false);\n   const [chosenAlgo, set_chosenAlgo] = useState(\"Choose an algorithm\");\n   const [sortingSpeed, set_sortingSpeed] = useState(180);\n   const [sortDisabled, set_sortDisabled] = useState(true);\n   const [generateBtn_disabled, set_generateBtn_disabled] = useState(false);\n   const [arraySizeButton, set_arraySizeButton] = useState(false);\n   const [sortSpeed, set_sortSpeed] = useState(false);\n   const [descending, set_descending] = useState(false);\n   const [disableDescending, set_disableDescending] = useState(false);\n   const sortingAlgoList = [\n      \"Merge Sort\", \"Quick Sort\", \"Heap Sort\", \"Shell Sort\", \"Insertion Sort\",\n      \"Selection Sort\", \"Bubble Sort\"\n   ];\n\n   const [arraySize, set_arraySize] = useState(150)\n\n   // random numbers generator range from 2 to 300\n   function generateRandom(size: number) {\n      let bars = (document.getElementsByClassName('bars') as HTMLCollectionOf<HTMLElement>)\n      for (let x = 0; x < bars.length; x++) {\n         if (bars[x]) {\n            bars[x].style.backgroundColor = \"#0AFFEF\"\n            bars[x].style.transition = '.2s ease';\n         }\n      }\n      const array = [];\n      for (let x = 0; x < size; x++) {\n         const random = Math.floor(Math.random() * (300 - 2 + 1) + 2)\n         array.push(random);\n      }\n      return array;\n   }\n   // THe State Randome Numbers Array\n   const [randomNumbers, set_randomNumbers] = useState(generateRandom(150));\n\n   function changeArraySize(n: any) {\n      set_arraySize(n);\n      set_randomNumbers(generateRandom(n));\n      if (!first) {\n         set_sortDisabled(false);\n      }\n   }\n\n   function sort() {\n      // check what algorithm to be use\n      let bars = (document.getElementsByClassName('bars') as HTMLCollectionOf<HTMLElement>)\n      for (let x = 0; x < bars.length; x++) {\n         if (bars[x]) {\n            bars[x].style.backgroundColor = \"red\"\n         }\n      }\n      const index = sortingAlgoList.indexOf(chosenAlgo)\n      first = false;\n      set_sortDisabled(true);\n      set_arraySizeButton(true);\n      set_sortSpeed(true);\n      set_generateBtn_disabled(true)\n      set_disableDescending(true)\n\n      if (index === 0) MergeSort(randomNumbers, sortingSpeed, descending, enablePanels);\n      else if (index === 1) QuickSort(randomNumbers, sortingSpeed, descending, enablePanels)\n      else if (index === 2) HeapSort(randomNumbers, sortingSpeed, descending, enablePanels);\n      else if (index === 3) ShellSort(randomNumbers, sortingSpeed, descending, enablePanels);\n      else if (index === 4) InsertionSort(randomNumbers, sortingSpeed, descending, enablePanels);\n      else if (index === 5) SelectionSort(randomNumbers, sortingSpeed, descending, enablePanels);\n      else if (index === 6) BubbleSort(randomNumbers, sortingSpeed, descending, enablePanels);\n   }\n\n   function enablePanels(t: number) {\n      setTimeout(() => {\n         set_generateBtn_disabled(false)\n         set_arraySizeButton(false);\n         set_sortSpeed(false);\n         set_disableDescending(false);\n      }, t * (200 - sortingSpeed))\n   }\n\n   function changeSpeed(n: number) {\n      set_sortingSpeed(n);\n   }\n\n   return (\n      <Box\n         p={4}\n         className=\"flat\"\n         style={{\n            width: '98vw', height: '80vh', position: 'relative',\n            margin: 'auto', top: '1rem', overflow: 'hidden',\n            borderRadius: '10px'\n         }}>\n\n\n         <Box id=\"sorting-windows\">\n            <div className=\"bars-container\">\n               <div className=\"algo-options\">\n                  <Box className={\"sorting-algorithms\"} hidden={!algoOptionsOpen} >\n                     <div style={{ pointerEvents: 'none' }} > <Box p={2} pl={1}>  </Box> </div>\n                     {\n                        sortingAlgoList.map((algo: any, index: number) =>\n                           <div key={index}> <Box p={1} pl={2} onClick={() => {\n                              set_chosenAlgo(algo);\n                              set_algoOptionsOpen(false);\n                              set_sortDisabled(false)\n                           }} > {algo} </Box> </div>\n                        )\n                     }\n                  </Box>\n                  <Box flex={1} onClick={() => { set_algoOptionsOpen(!algoOptionsOpen) }} >\n                     {chosenAlgo}\n                  </Box>\n                  <Box onClick={() => { set_algoOptionsOpen(!algoOptionsOpen) }} display=\"flex\" justifyContent=\"center\" alignItems=\"center\" > <ArrowDropDownIcon /> </Box>\n               </div>\n               {\n                  randomNumbers.map((num: number, index: number) =>\n                     <div className=\"bars\" style={{ height: num + 'px' }} key={index} > </div>\n                  )\n               }\n            </div>\n\n         </Box>\n\n         <div id=\"scroll\" >\n\n            <Box className=\"sorting-panel\">\n               <Box m={1} display=\"flex\" flexDirection=\"column\" alignContent=\"center\" justifyContent=\"center\">\n                  <Button disabled={generateBtn_disabled} label=\"Generate New Array\" handleClick={() => {\n                     set_randomNumbers(generateRandom(arraySize));\n                     if (!first) {\n                        set_sortDisabled(false);\n                        first = false;\n                     }\n                  }} />\n               </Box>\n\n               <Box m={1} display=\"flex\" flexDirection=\"column\" alignContent=\"center\" justifyContent=\"center\">\n                  <Box pb={1} textAlign=\"center\" > Change Array Size </Box>\n                  <Slider disabled={arraySizeButton} id=\"array_size\" onInput={(n: any) => changeArraySize(n)} color=\"accent\" min={5} max={300} value={arraySize} />\n               </Box>\n               <Box m={1} display=\"flex\" flexDirection=\"column\" alignContent=\"center\" justifyContent=\"center\">\n                  <Box pb={1} textAlign=\"center\" > Change Speed </Box>\n                  <Slider disabled={sortSpeed} id=\"sorting-speed\" onInput={(n: any) => changeSpeed(n)} color=\"error\" min={5} max={198} value={sortingSpeed} />\n               </Box>\n               <Box m={2} style={{ position: 'relative', bottom: '2px' }} display=\"flex\" flexDirection=\"column\" alignContent=\"center\" justifyContent=\"center\">\n                  <Box pb={1} textAlign=\"center\" > Descending </Box>\n                  <ToggleButton disabled={disableDescending} toggleOn={descending} color=\"accent\" title=\"Descending\" handleClick={() => {\n                     set_descending(!descending);\n                     if (!first) {\n                        set_sortDisabled(false)\n                        first = false;\n                     }\n                  }} />\n               </Box>\n\n               <Box m={1} display=\"flex\" flexDirection=\"column\" alignContent=\"center\" justifyContent=\"center\">\n                  <ButtonAccent label=\"Sort !\" disabled={sortDisabled} handleClick={sort} title=\"Start sorting\" type=\"error\" />\n               </Box>\n            </Box>\n         </div>\n      </Box>\n   )\n}\nexport default memo(SortingVisualizer);","\nexport default function TextInput (props: any)\n{\n\n    return (\n        <input \n            type={props.type}\n            className={\"thin-inset textInput\"}\n            placeholder={props.placeHolder}\n            autoFocus={props.autofocus}\n            onInput={(event: any) => {\n                const value = event.target.value;\n                props.handleInput(value)\n            }}\n            id={props.id}\n            style={{color: props.error ? '#FF555D' : 'white',\n                    width: props.fullWidth ? '100%': 'auto'}}\n            />\n    )\n}","let FOUND = 1;\nlet CHANGE_COLOR = 0;\nlet REVERT_COLOR = -1;\n\ninterface Frame {\n   state: number, // the options are the variables above\n   lookupIndex: number, // the index in the array\n   steps: number // steps it takes to find\n}\n\nlet LINEAR_SEARCH_ANIMATIONS = [] as Frame[];\nlet BINARY_SEARCH_ANIMATIONS = [] as Frame[];\n\nexport default function getAnimations(array: number[], searchItem: number) {\n   // call this first...\n   resetAnimations();\n   fill_LinearAnimationFrames(array, searchItem);\n   fill_BinaryAnimationFrames(array, searchItem);\n\n   return [\n      LINEAR_SEARCH_ANIMATIONS,\n      BINARY_SEARCH_ANIMATIONS\n   ];\n}\n\nfunction resetAnimations() {\n   LINEAR_SEARCH_ANIMATIONS = []\n   BINARY_SEARCH_ANIMATIONS = []\n}\n\n// -----> fill linear animation frams\nfunction fill_LinearAnimationFrames(array: number[], searchItem: number) {\n   for (let x = 0; x < array.length; x++) {\n      let newFrame: Frame;\n      if (array[x] == searchItem) {\n         newFrame = {\n            state: FOUND,\n            lookupIndex: x, // the index where the saerchItem were found\n            steps: x + 1 // the steps it takes two find the searchItem\n         }\n         LINEAR_SEARCH_ANIMATIONS.push(newFrame);\n         // FOR DEBUGGING PURPOSES\n         // alert(`${searchItem} has been found at index ${x}`)\n         return;\n      }\n      else {\n         // push a frame where that indicates to change color\n         newFrame = {\n            state: CHANGE_COLOR,\n            lookupIndex: x, // current index where we look at\n            steps: x + 1\n         }\n         LINEAR_SEARCH_ANIMATIONS.push(newFrame);\n         // here we need to push another one to change the color back to normal\n         newFrame = {\n            state: REVERT_COLOR,\n            lookupIndex: x, // current index where we look at\n            steps: x + 1\n         }\n         LINEAR_SEARCH_ANIMATIONS.push(newFrame);\n      }\n   }\n}\n\n// -----> BINARY SEARCH\nfunction fill_BinaryAnimationFrames(array: number[], searchItem: number) {\n   let sortedArray = new Array(array.length);\n   sortedArray = Object.assign([], array);\n   sortedArray = sortedArray.sort((a: number, b: number) => a - b);\n   // console.log(searchItem)\n   // console.log(sortedArray)\n   binSearch(\n      sortedArray,\n      searchItem,\n      0,\n      sortedArray.length - 1,\n      0\n   )\n}\n\nfunction binSearch(\n   sortedArray: number[],\n   searchItem: number,\n   lowerBound: number,\n   upperBound: number,\n   NoOfSteps: number): number {\n\n   if (lowerBound > upperBound) return -1;\n\n   NoOfSteps += 1;\n   let midIndex = (upperBound + lowerBound + 1) / 2;\n   midIndex = Math.floor(midIndex);\n   let midElement = sortedArray[midIndex];\n\n   let newFrame: Frame;\n\n   if (midElement == searchItem) {\n      newFrame = {\n         state: FOUND,\n         lookupIndex: midIndex,\n         steps: NoOfSteps\n      }\n      BINARY_SEARCH_ANIMATIONS.push(newFrame);\n      // FOR DEBUGGING PURPOSES\n      // alert(`found at index ${midIndex}`)\n      return midIndex;\n   }\n   // if not the middle check the lower bound\n   // if the searchItem is less than mid Element\n   newFrame = {\n      state: CHANGE_COLOR,\n      lookupIndex: midIndex,\n      steps: NoOfSteps\n   }\n   BINARY_SEARCH_ANIMATIONS.push(newFrame);\n   newFrame = {\n      state: REVERT_COLOR,\n      lookupIndex: midIndex,\n      steps: NoOfSteps\n   }\n   BINARY_SEARCH_ANIMATIONS.push(newFrame);\n\n   if (searchItem < midElement) {\n      return binSearch(\n         sortedArray,\n         searchItem,\n         lowerBound,\n         midIndex - 1,\n         NoOfSteps\n      )\n   }\n   // otherwise\n   return binSearch(\n      sortedArray,\n      searchItem,\n      midIndex + 1,\n      upperBound,\n      NoOfSteps\n   )\n}","import { useState, useEffect, useRef, memo } from 'react'\nimport { Box } from '@material-ui/core';\nimport TextField from '../../inputs/TextField';\nimport ButtonAccent from '../../buttons/ButtonAccent';\nimport Button from '../../buttons/Button';\nimport getAnimations from './searchingAlgorithms';\n\nfunction SearchingVisualizer()\n{\n   // ---> States\n   const [searchSize, setSearchSize] = useState(200)\n   const [searchItem, setsearchItem] = useState(-1);\n   const [searchArray, setSearchArray] = useState(generateRandom(searchSize));\n   const [searchSpeed, setSearchSpeed] = useState(300);\n   const SortedsearchArray = useRef(sorted());\n\n   const [linearSearchMessage, set_linearSearchMessage] = useState(\"Linear Search\")\n   const [binarySearchMessage, set_binarySearchMessage] = useState(\"Binary Search\")\n   const [linearMessageColor, setLinearMessageColor] = useState(\"white\")\n   const [binaryMessageColor, setBinaryMessageColor] = useState(\"white\")\n   const [timeouts, setTimeouts] = useState([] as any)\n   const [lfound, setlfound] = useState(false)\n   const [bfound, setbfound] = useState(false)\n\n   // -----> UseEffect\n\n   useEffect(() => {\n      SortedsearchArray.current = sorted()\n   }, [searchArray])\n\n\n   // ---> Functions\n\n   function animate(animationFrames: any[], CLASSNAME: string) {\n      let CHANGE_COLOR = 0;\n      let REVERT_COLOR = -1;\n      const numberOfFrames = animationFrames.length;\n\n      for (let x = 0; x < numberOfFrames; x++) {\n         const frame = animationFrames[x];\n         const state = frame.state\n         const steps = frame.steps\n         const index = frame.lookupIndex\n         // const accent = '#0AFFEF';\n         const red = '#dd6f74';\n         if (state === CHANGE_COLOR) executeFrame(CLASSNAME, index, red, x)\n         else if (state === REVERT_COLOR) executeFrame(CLASSNAME, index, red, x)\n         else {\n            executeFrame(CLASSNAME, index, 'yellowgreen', x)\n            if (CLASSNAME === 'linear-bar') {\n               changeMessage('linear-bar', index, steps, x);\n            }\n            else {\n               changeMessage('binary-bar', index, steps, x);\n            }\n            return;\n         }\n      }\n   }\n\n   function changeMessage(CLASSNAME: string, index: number, steps: number, ms: number) {\n      timeouts.push(setTimeout(() => {\n         if (CLASSNAME === 'binary-bar') {\n            setbfound(true);\n            set_binarySearchMessage(`Found at index ${index} in ${steps} steps.`);\n            setBinaryMessageColor('yellowgreen');\n            return;\n         }\n         setlfound(true);\n         set_linearSearchMessage(`Found at index ${index} in ${steps} steps.`);\n         setLinearMessageColor('yellowgreen');\n      }, ms * (301 - searchSpeed)))\n   }\n\n   function executeFrame(CLASSNAME: string, x: number, COLOR: string, ms: number) {\n      timeouts.push(\n         setTimeout(() => {\n            changeColor(CLASSNAME, x, COLOR);\n         }, ms * (301 - searchSpeed)))\n   }\n\n   function changeColor(CLASSNAME: string, index: number, COLOR: string) {\n      const items = (document.getElementsByClassName(CLASSNAME) as HTMLCollectionOf<HTMLElement>)\n      if (items[index]) {\n         items[index].style.backgroundColor = COLOR;\n      }\n   }\n\n   function searchNow() {\n      setlfound(false)\n      setbfound(false)\n      if (searchItem < 0) {\n         alert('Please input a positive integer.')\n         return;\n      }\n\n      for (let x = 0; x < searchArray.length; x++) {\n         changeColor('linear-bar', x, '#0AFFEF')\n         changeColor('binary-bar', x, '#0AFFEF')\n      }\n\n      set_binarySearchMessage('Searching binary...')\n      set_linearSearchMessage('Searching linearly...');\n      setBinaryMessageColor('rgba(255,255,255,.7)')\n      setLinearMessageColor('rgba(255,255,255,.7)')\n\n      let ANIMATIONS = getAnimations(searchArray, searchItem)\n      let LINEAR_ANIMATION = ANIMATIONS[0]\n      let BINARY_ANIMATION = ANIMATIONS[1]\n\n      animate(LINEAR_ANIMATION, 'linear-bar');\n\n      if (LINEAR_ANIMATION.length === searchArray.length * 2) {\n         timeouts.push(setTimeout(() => {\n            set_linearSearchMessage(`Item ${searchItem} not found.`)\n            setLinearMessageColor('red')\n         }, (searchArray.length * 2) * (301 - searchSpeed)))\n      }\n\n      animate(BINARY_ANIMATION, 'binary-bar');\n      let binarySearchWorstTime = (Math.floor(Math.log2(searchArray.length)) * 2);\n\n      if (BINARY_ANIMATION.length === binarySearchWorstTime || BINARY_ANIMATION.length === binarySearchWorstTime+2) {\n         timeouts.push(setTimeout(() => {\n            setbfound(true);\n            set_binarySearchMessage(`Item ${searchItem} not found.`)\n            setBinaryMessageColor('red')\n         }, (binarySearchWorstTime) * (301 - searchSpeed)))\n      }\n   }\n\n   function changeSize(newSize: number) {\n      setSearchSize(newSize);\n      setSearchArray(generateRandom(searchSize));\n   }\n\n   function sorted() {\n      let copy = new Array(searchArray.length)\n      copy = Object.assign([], searchArray)\n      copy = copy.sort((a: number, b: number) => a - b)\n      return copy;\n   }\n\n   function generateRandom(size: number) {\n      let bars = (document.getElementsByClassName('bars') as HTMLCollectionOf<HTMLElement>)\n      const array = [];\n      for (let x = 0; x < size; x++) {\n         const random = Math.floor(Math.random() * (110 - 1 + 1) + 1)\n         array.push(random);\n      }\n      return array;\n   }\n\n\n\n   // ---> MARK UP\n   return (\n      <Box\n         p={4}\n         className=\"flat searchVisualizerContainer \"\n         style={{\n            width: '98vw', height: '80vh', position: 'relative',\n            margin: 'auto', top: '1rem', overflow: 'hidden',\n            borderRadius: '10px'\n         }}>\n         <Box\n            display=\"flex\"\n            className=\"searchItemInput rgba2 transparent\" >\n            <Box\n               margin=\"auto\"\n               flex={1}\n               className=\"transparent\">\n               <Box component=\"span\" mr={1}>Search for :</Box>\n               <TextField\n                  handleInput={(n: number) => {\n                     setsearchItem(n);\n                  }}\n                  type=\"number\"\n                  placeHolder=\"Any positive integer\" />\n            </Box>\n         </Box>\n         <Box\n            className=\"linearSearch rgba2\" >\n            <h3 className=\"searchLabel\" style={{ color: linearMessageColor }} > {linearSearchMessage} </h3>\n            <div>\n               {searchArray.map((each: number, idx: number) =>\n                  <div\n                     style={{ height: `${each}px` }}\n                     key={idx}\n                     className=\"linear-bar\" >\n                  </div>\n               )}\n            </div>\n         </Box>\n         <Box\n            className=\"binarySearch rgba2\" >\n            <h3 className=\"searchLabel\" style={{ color: binaryMessageColor }} > {binarySearchMessage} </h3>\n            <div>\n               {\n                  SortedsearchArray.current.map((each: number, idx: number) =>\n                     <div\n                        style={{ height: `${each}px` }}\n                        key={idx}\n                        className=\"binary-bar\">\n                     </div>\n                  )}\n            </div>\n         </Box>\n         <Box\n            className=\"searchingVisualizerPanel rgba2\" >\n            <div>\n               <Box\n                  ml={2} mr={2}>\n                  <Button label=\"New Array\" handleClick={() => {\n                     setSearchArray(generateRandom(searchSize))\n                     for (let x = 0; x < searchArray.length; x++) {\n                        changeColor('linear-bar', x, '#0AFFEF')\n                        changeColor('binary-bar', x, '#0AFFEF')\n                     }\n                     setLinearMessageColor(\"white\")\n                     setBinaryMessageColor(\"white\")\n                     set_binarySearchMessage(\"Binary Search\")\n                     set_linearSearchMessage(\"Linear Search\")\n                  }} />\n               </Box>\n               <Box\n                  ml={2} mr={2}\n                  display=\"flex\"\n                  flexDirection=\"column\"\n                  alignItems=\"center\"\n                  justifyContent=\"center\">\n                  <Box p={1} >Change Size</Box>\n                  <input\n                     id=\"searchArray-change-size-slider\"\n                     type=\"range\"\n                     onInput={(event: any) => { changeSize(event.target.value) }}\n                     value={searchSize}\n                     min={10}\n                     max={300} />\n               </Box>\n               <Box\n                  ml={2} mr={2}\n                  display=\"flex\"\n                  flexDirection=\"column\"\n                  alignItems=\"center\"\n                  justifyContent=\"center\">\n                  <Box p={1}>Change Speed</Box>\n                  <input\n                     id=\"searchArray-change-speed-slider\"\n                     type=\"range\"\n                     value={searchSpeed}\n                     onInput={(event: any) => { setSearchSpeed(event.target.value) }}\n                     min={10}\n                     max={200} />\n               </Box>\n               <Box\n                  ml={2} mr={2}>\n                  <ButtonAccent\n                     type=\"accent\"\n                     label=\"Search\"\n                     handleClick={searchNow} />\n               </Box>\n               <Box\n                  ml={2} mr={2}>\n                  <ButtonAccent\n                     type=\"error\"\n                     label=\"stop\"\n                     handleClick={() => {\n                        for (const each of timeouts) {\n                           clearTimeout(each);\n                        }\n                        if (!lfound) {\n                           set_linearSearchMessage(\"Search stopped.\")\n                           setLinearMessageColor('yellow')\n                        }\n                        if (!bfound) {\n                           set_binarySearchMessage(\"Search stopped.\")\n                           setBinaryMessageColor('yellow')\n                        }\n                     }} />\n               </Box>\n            </div>\n         </Box>\n      </Box>\n   )\n}\nexport default memo(SearchingVisualizer);","import { memo, useState, useContext, useEffect, useRef } from 'react';\nimport { mouseDownContext } from './PathFindingVisualizer';\n\nfunction NodeSquare(props: any) {\n    const mouseIsDown = useContext(mouseDownContext);\n    const [start, set_start] = useState(props.isStart);\n    const [finish, set_finish] = useState(props.isFinish);\n    const classname = start ? 'node start' : (finish ? 'node finish' : 'node');\n\n    let box = (document.getElementsByClassName('node') as HTMLCollectionOf<HTMLElement>);\n\n    useEffect(() => {\n        box = (document.getElementsByClassName('node') as HTMLCollectionOf<HTMLElement>);\n        props.clearPath();\n        props.onMouseEnter(mouseIsDown.s, props.id, true);\n    }, [finish]);\n\n    useEffect(() => {\n        box = (document.getElementsByClassName('node') as HTMLCollectionOf<HTMLElement>);\n        props.clearPath();\n        props.onMouseEnter(props.id, mouseIsDown.f, true);\n    }, [start]);\n\n    // @@@@@@@@@@@@@@@@ functions @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@2\n    function handleMouseDown(e: any) {\n        if (start || finish) return;\n        e.preventDefault();\n        box = (document.getElementsByClassName('node') as HTMLCollectionOf<HTMLElement>);\n        let obs = box[props.id].classList.contains('obstacle');\n        if (e.ctrlKey) {\n            const weighted = box[props.id].classList.contains('weight');\n            if (weighted) box[props.id].classList.remove('weight');\n            else box[props.id].classList.add('weight');\n        }\n        else {\n            if (obs) box[props.id].classList.remove('obstacle');\n            else box[props.id].classList.add('obstacle');\n        }\n\n        props.clearPath();\n        props.onMouseEnter(mouseIsDown.s, mouseIsDown.f, true);\n        props.onMouseDown(true);\n    }\n\n    function handleMouseEnter(e: any) {\n        e.preventDefault();\n        if (start || finish) return;\n        if (mouseIsDown.MouseDown) {\n            box = (document.getElementsByClassName('node') as HTMLCollectionOf<HTMLElement>);\n            let obs = box[props.id].classList.contains('obstacle');\n            if (e.ctrlKey) {\n                const weighted = box[props.id].classList.contains('weight');\n                if (weighted) box[props.id].classList.remove('weight');\n                else box[props.id].classList.add('weight');\n            }\n            else {\n                if (obs) box[props.id].classList.remove('obstacle');\n                else box[props.id].classList.add('obstacle');\n            }\n            props.clearPath();\n            props.onMouseEnter(mouseIsDown.s, mouseIsDown.f, true);\n        }\n    }\n    function handleMouseUp() {\n        props.onMouseDown(false);\n        if(mouseIsDown.prev === props.id) {\n            console.log(box[props.id]);\n            console.log(box[props.id + 1]);\n        }\n    }\n    function handleDragStart(e: any) {\n        box[props.id].setAttribute('draggable', 'false');\n        props.changePrev(props.id);\n    }\n    function handleOnDrop(e: any) {\n        e.preventDefault();\n        if (box[mouseIsDown.prev].classList[1] === 'start') {\n            box[props.id].classList.add('start');\n            box[mouseIsDown.prev].classList.remove('start');\n            props.changeStart(props.id);\n            set_start(true);\n        }\n        else if (box[mouseIsDown.prev].classList[1] === 'finish') {\n            box[props.id].classList.add('finish');\n            box[mouseIsDown.prev].classList.remove('finish');\n            props.changeFinish(props.id);\n            set_finish(true);\n        }\n        box[props.id].setAttribute('draggable', 'true');\n    }\n    function handleDragOver(e: any) {\n        e.preventDefault();\n    }\n    // @@@@@@@@@@@@@@@@@@@@ mark up @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n    return (\n        <div\n            onDragOver={handleDragOver}\n            onDrop={handleOnDrop}\n            onDragStart={handleDragStart}\n            onMouseEnter={handleMouseEnter}\n            onMouseDown={handleMouseDown}\n            onMouseUp={handleMouseUp}\n            draggable={start || finish}\n            className={classname}\n            id={props.id}>\n        </div>\n    )\n}\nexport default memo(NodeSquare);","\nconst nodes = (document.getElementsByClassName('node') as HTMLCollectionOf<HTMLElement>);\n\nfunction resetNodes () {\n    for (let x = 0; x < (50 * 15); x++) {\n        nodes[x].setAttribute('data-distance', '1000');\n        nodes[x].setAttribute('data-parent', 'none');\n    }\n}\nfunction setDistance (index: number, distance: number) {\n    nodes[index].setAttribute('data-distance', distance.toString());\n}\nfunction getDistance (index: number): number {\n    const distance = nodes[index].getAttribute('data-distance');\n    if (distance) return parseInt(distance);\n    return 1000;\n}\nfunction isObstacle (index: number) {\n    return nodes[index].classList.contains('obstacle');\n}\nfunction isWeighted (index: number) {\n    return nodes[index].classList.contains('weight');\n}\nfunction getNeighbors (index: number) {\n    const up = index - 50;\n    const down = index + 50;\n    const right = index + 1;\n    const left = index - 1;\n    const neighbors = [] as any[];\n\n    if (down < (50 * 14) && !isObstacle(down)) neighbors.push(nodes[down]);\n    if (right < (50 * 14) && !isObstacle(right)) neighbors.push(nodes[right]);\n    if (left >= 51 && !isObstacle(left)) neighbors.push(nodes[left]);\n    if (up >= 51 && !isObstacle(up)) neighbors.push(nodes[up]);\n\n    return neighbors;\n}\nfunction setParent (index: number, parent: string) {\n    nodes[index].setAttribute('data-parent', parent);\n}\nfunction getParent (index: number) {\n    let parentIndex;\n\n    if (nodes[index]) {\n        parentIndex = nodes[index].getAttribute('data-parent');\n    }\n    return parentIndex;\n}\n\nfunction backTrack (index: number) {\n    let frames = [] as any[];\n    let parentIndex = getParent(index);\n    while (parentIndex !== 'none') {\n        let x = 0;\n        if (parentIndex)\n            x = parseInt(parentIndex);\n        frames.push(x);\n        parentIndex = getParent(x);\n    }\n    return frames;\n}\n\n// ============================= ENTRY POINT ===============\nexport const dijkstra = (startIdx: number, goalIdx: number) => {\n    resetNodes();\n    setDistance(startIdx, 0);\n\n    let visited: any = {};\n    let queue = [nodes[startIdx]];\n    let frames = [] as number[];\n\n    while (queue.length > 0) {\n        let curNode = queue.shift();\n        if (curNode) {\n            const curID = parseInt(curNode.id);\n\n            let neighbors = getNeighbors(curID);\n\n            for (let x = 0; x < neighbors.length; x++) {\n\n                let curNode = neighbors[x];\n                let curNodeID = parseInt(curNode.id);\n\n                let curDistance = getDistance(curNodeID);\n                let add = isWeighted(curNodeID) ? 2 : 1;\n                let newDistance = getDistance(curID) + add;\n\n                if (newDistance < curDistance) {\n                    setDistance(curNodeID, newDistance);\n                    setParent(curNodeID, curID.toString());\n                }\n\n                if (curNodeID === goalIdx) {\n                    return [frames,\n                        backTrack(curNodeID)];\n                }\n                if (visited[curNodeID]) continue;\n                else {\n                    queue.push(curNode);\n                    visited[curNodeID] = true;\n                    frames.push(curNodeID);\n                }\n            }\n            visited[curID] = true;\n        }\n    }\n\n    return [frames, []];\n};\n","import {dijkstra} from './dijkstra';\n\nconst min = 0;\nconst max = (50 * 15) - 1;\nconst BFS = 0;\nconst DFS = 1;\nconst DIJKSTRA = 2;\n\nlet animationFrames = [] as any;\n\nexport class node {\n    data: number;\n    parent?: node;\n    constructor(value: number) {\n        this.data = value;\n        this.parent = undefined;\n    }\n}\nexport default function Algorithms(start: number, end: number, animationId: number) {\n\n    animationFrames = [];\n    let pathAnimation = [] as any;\n    let pathStart;\n    if (animationId === BFS) pathStart = bfs(start, end);\n    else if (animationId === DFS) pathStart = bfs(start, end, true);\n    else if (animationId === DIJKSTRA) {\n        let frames = dijkstra(start, end);\n        return frames;\n    }\n\n    pathStart = pathStart?.parent;\n\n    while (pathStart != undefined) {\n        pathAnimation.push(pathStart.data);\n        pathStart = pathStart.parent;\n    }\n    return [animationFrames, pathAnimation];\n}\n\n\nexport function bfs(start: number, end: number, depth?: boolean) {\n    let boxes = (document.getElementsByClassName('node') as HTMLCollectionOf<HTMLElement>);\n    let visited = new Set<number>();\n    visited.add(start);\n    let startNode = new node(start);\n    let queue = [] as node[];\n    queue.push(startNode);\n\n    while (queue.length > 0) {\n        let front;\n        if (depth) front = queue.pop();\n        else front = queue.shift();\n        if (front?.data === end) {\n            return front;\n        }\n        else if (front) {\n            const data = front.data;\n            const right = data + 1;\n            const down = data + 50;\n            const up = data - 50;\n            const left = data - 1;\n            if (left >= min && !visited.has(left) && !boxes[left].classList.contains('obstacle')) {\n                visited.add(left);\n                let newNode = new node(left);\n                newNode.parent = front;\n                queue.push(newNode);\n                animationFrames.push(left);\n            }\n            if (right < max && !visited.has(right) && !boxes[right].classList.contains('obstacle')) {\n                visited.add(right);\n                let newNode = new node(right);\n                newNode.parent = front;\n                queue.push(newNode);\n                animationFrames.push(right);\n            }\n            if (down < max && !visited.has(down) && !boxes[down].classList.contains('obstacle')) {\n                visited.add(down);\n                let newNode = new node(down);\n                newNode.parent = front;\n                queue.push(newNode);\n                animationFrames.push(down);\n            }\n            if (up >= min && !visited.has(up) && !boxes[up].classList.contains('obstacle')) {\n                visited.add(up);\n                let newNode = new node(up);\n                newNode.parent = front;\n                queue.push(newNode);\n                animationFrames.push(up);\n            }\n        }\n    }\n}","import React, {createContext, useEffect} from 'react';\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\nimport NodeSquare from './NodeSquare';\nimport {Box} from '@material-ui/core';\nimport Button from '../../buttons/Button';\nimport ButtonAccent from '../../buttons/ButtonAccent';\nimport {useState, useRef, useMemo} from 'react';\nimport Algorithms, {bfs, node} from './Algorithms';\n\nexport const mouseDownContext = createContext({} as any);\n\nfunction PathFindingVisualizer () {\n    let boxes = (document.getElementsByClassName('node') as HTMLCollectionOf<HTMLElement>);\n    const [algoOptionsDropdown, set_algoOptionsDropdown] = useState(false);\n    const [activeAlgo, setActiveAlgo] = useState({id: -1, name: 'Choose Algorithm'});\n    const [speed, setSpeed] = useState(93);\n\n    const algortihms = useRef([\n        {id: 0, name: 'Breadth First Search'},\n        {id: 1, name: 'Depth First Search'},\n        {id: 2, name: 'Dijkstra\\'s Algorithm'},\n    ]);\n\n    useEffect(() => {\n        addBorderWalls();\n    }, []);\n\n    const [nodes, setNodes] = useState([] as any);\n    const [start, setStart] = useState(105);\n    const [finish, setFinish] = useState(645);\n    const [prevNode, setPrevNode] = useState(-1);\n\n    const [isMouseDown, set_isMouseDown] = useState(false);\n\n    useMemo(() => {\n        const hey = [] as any;\n        for (let x = 0; x < 50 * 15; x++) {\n            hey.push(<NodeSquare\n                clearPath={clearPath}\n                onMouseEnter={findThePath}\n                changeStart={handleChangeStart}\n                changeFinish={handleChangeFinish}\n                changePrev={(id: number) => {setPrevNode(id);}}\n                onMouseDown={(b: boolean) => {set_isMouseDown(b);}}\n                isStart={x === start}\n                isFinish={x === finish}\n                id={x}\n                key={x} />);\n        }\n        setNodes(hey);\n    }, [start, finish, activeAlgo]);\n\n    // FUNCTIONS @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n    function findThePath (s: number, en: number, instant?: boolean) {\n        if (instant) {\n            const frames = Algorithms(en, s, activeAlgo.id)[1];\n            for (let x = 0; x < frames.length; x++) {\n                if (frames[x] === finish) break;\n                if (boxes[frames[x]]) {\n                    boxes[frames[x]].classList.add('path');\n                }\n            }\n            return;\n        }\n        clearPath();\n        clearVisited();\n        // this will accept two array\n        let animationFrames = Algorithms(en, s, activeAlgo.id);\n        animate(animationFrames[0], 'visited');\n        setTimeout(() => {\n            animatePath(animationFrames[1]);\n            setTimeout(() => {\n                clearVisited();\n            }, animationFrames[1].length * (120 - speed));\n        }, animationFrames[0].length * (100 - speed));\n    }\n\n    function animate (frames: number[], classname: string) {\n        for (let x = 0; x < frames.length; x++) {\n            if (frames[x] === start) continue;\n            changeColor(frames[x], x, classname);\n        }\n    }\n    function animatePath (frames: number[]) {\n        for (let x = 0; x < frames.length; x++) {\n            if (frames[x] === finish) continue;\n            changeColor(frames[x], x * 4, 'path');\n        }\n        if (boxes[frames[frames.length - 1]] === undefined) {\n            window.alert('There is no possible path.');\n        }\n    }\n\n    function changeColor (id: number, ms: number, classname: string) {\n        setTimeout(() => {\n            if (classname === 'path') {\n                boxes[id].classList.remove('visited');\n                boxes[id].classList.add(classname);\n            }\n            else if (boxes[id]) {\n                if (id === finish) return;\n                boxes[id].classList.add(classname);\n            }\n        }, ms * (100 - speed));\n    }\n    function addBorderWalls () {\n        for (let x = 0; x < 50; x++) {\n            if (boxes[x])\n                boxes[x].style.transition = \".1s ease-in\";\n            boxes[x].classList.add('obstacle');\n        }\n        for (let x = 50; x < (50 * 15); x += 50) {\n            if (boxes[x])\n                boxes[x].style.transition = \".1s ease-in\";\n            boxes[x].classList.add('obstacle');\n        }\n        for (let x = 99; x < (50 * 15); x += 50) {\n            if (boxes[x])\n                boxes[x].style.transition = \".1s ease-in\";\n            boxes[x].classList.add('obstacle');\n        }\n        for (let x = 50 * 14; x < (50 * 15); x++) {\n            if (boxes[x])\n                boxes[x].style.transition = \".1s ease-in\";\n            boxes[x].classList.add('obstacle');\n        }\n    }\n    function handleChangeStart (n: number) {\n        setStart(n);\n    }\n    function handleChangeFinish (n: number) {\n        setFinish(n);\n    }\n    const ShowAlgoOptionsDropdown = () => {\n        set_algoOptionsDropdown((prev: boolean) => !prev);\n    };\n    const selectAlgo = (id: number) => {\n        setActiveAlgo(algortihms.current[id]);\n        set_algoOptionsDropdown(false);\n    };\n    function changeSpeed (e: any) {\n        const value = e.target.value;\n        setSpeed(value);\n    }\n    function clearObstacles () {\n        let boxes = document.querySelectorAll('.obstacle');\n        for (let x = 0; x < boxes.length; x++) {\n            boxes[x].classList.remove('obstacle');\n        }\n    }\n    function clearPath () {\n        let boxes = document.querySelectorAll('.path');\n        for (let x = 0; x < boxes.length; x++) {\n            boxes[x].classList.remove('path');\n        }\n    }\n    function clearVisited () {\n        let boxes = document.querySelectorAll('.visited');\n        for (let x = 0; x < boxes.length; x++) {\n            boxes[x].classList.remove('visited');\n        }\n    }\n    function clearWeights () {\n        let boxes = document.querySelectorAll('.weight');\n        for (let x = 0; x < boxes.length; x++) {\n            boxes[x].classList.remove('weight');\n        }\n    }\n    function resetField () {\n        setActiveAlgo({id: -1, name: \"Choose Algorithm\"});\n        clearObstacles();\n        clearPath();\n        clearVisited();\n        clearWeights();\n        addBorderWalls();\n    }\n    function generateWalls () {\n        clearObstacles();\n        addBorderWalls();\n        clearPath();\n        for (let x = 0; x < 50 * 15; x++) {\n            if (boxes[x] && !(boxes[x].classList.contains('obstacle')) && !(boxes[x].classList.contains('finish')) && !(boxes[x].classList.contains('start'))) {\n                if (Math.floor(Math.random() * 50) < 14)\n                    boxes[x].classList.add('obstacle');\n            }\n        }\n    }\n    // OTHER VARIABLES @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n    const algoOptions = algortihms.current.map((each: any) =>\n        <div key={each.id} onClick={() => {\n            (document.getElementsByClassName(\"pathfinding-algoOptions\") as HTMLCollectionOf<HTMLElement>)[0].style.border = \"none\";\n            selectAlgo(each.id);\n        }} > {each.name} </div>\n    );\n\n    // function isObstacle(index: number) {\n    //     return (boxes[index] !== undefined && boxes[index].classList.contains('obstacle'));\n    // }\n    function makeObstacle (index: number) {\n        if (boxes[index] && !(boxes[index].classList.contains('finish')) && !(boxes[index].classList.contains('start'))) boxes[index].classList.add('obstacle');\n    }\n\n    function createMaze (start: number, length: number, height: number, first?: boolean) {\n        if (length < 2 || height < 3) return;\n        if (first) {\n            clearPath();\n            clearObstacles();\n            addBorderWalls();\n        }\n\n        let halfLen = Math.floor(length / 2);\n        let halfHeight = Math.floor(height / 2);\n\n        // horizontal mid node\n        let lmid = start + halfLen;\n        // vertical mid node\n        let hmid = start + (50 * halfHeight);\n\n        let randomX = Math.floor(Math.random() * halfHeight + 1);\n        for (let x = 0; x < halfHeight; x++) {\n            if (x === randomX || x === randomX - 1) continue;\n            makeObstacle(lmid + (50 * x));\n        }\n        let remainingY = (height - halfHeight);\n        randomX = Math.floor(Math.random() * remainingY);\n        for (let x = 0; x < remainingY; x++) {\n            if (x === randomX || x === randomX - 1) continue;\n            makeObstacle((lmid + (50 * halfHeight) + (x * 50)));\n        }\n\n        let randomY = Math.floor(Math.random() * halfLen + 1);\n\n        for (let x = 0; x < halfLen; x++) {\n            if (x === randomY || randomY - 1 === x || randomY + 1 === x) continue;\n            makeObstacle(hmid + x);\n        }\n        let remainingX = length - halfLen;\n        randomY = Math.floor(Math.random() * remainingX);\n        for (let x = 0; x < remainingX; x++) {\n            if (x === randomY || randomY - 1 === x || randomY + 1 === x) continue;\n            makeObstacle(hmid + x + halfLen);\n        }\n\n        createMaze(start, halfLen, halfHeight);\n        createMaze(start + halfLen - 1, remainingX, halfHeight);\n        createMaze(hmid + 100, halfLen, remainingY);\n        createMaze(hmid + 100 + halfLen, remainingX, remainingY);\n    }\n\n\n    // MARK UP @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n    return (\n        <Box\n            p={4}\n            className=\"flat\"\n            style={{\n                width: '98vw', height: '80vh', position: 'relative',\n                margin: 'auto', top: '1rem', overflow: 'hidden',\n                borderRadius: '10px'\n            }}>\n\n            <div className={\"pathfinding-algoOptions\"}>\n                <div className=\"pathfinding-algo-dropdown\" onClick={ShowAlgoOptionsDropdown}>\n                    <div> {activeAlgo.name} </div>\n                    <ArrowDropDownIcon />\n                </div>\n\n                <Box hidden={!algoOptionsDropdown}>\n                    <div className=\"pathAlgo-options\">\n                        {algoOptions}\n                    </div>\n                </Box>\n            </div>\n\n            <div className=\"search-field\">\n                <mouseDownContext.Provider value={{MouseDown: isMouseDown, prev: prevNode, s: start, f: finish}}>\n                    <div id=\"draggable-field\" >\n                        {nodes}\n                    </div>\n                </mouseDownContext.Provider>\n            </div>\n\n            <div className=\"pathFinding-panel\">\n                <div>\n                    <Box pl={2} pr={2} display=\"flex\" flexDirection=\"column\" alignItems=\"center\">\n                        <Box m={1}>Change Speed</Box>\n                        <input aria-label=\"pathfinding-speed\" type=\"range\" min={0.1} max={98} value={speed} onChange={changeSpeed} />\n                    </Box>\n                    <Box pl={2} pr={2} display=\"flex\" flexDirection=\"column\" alignItems=\"center\">\n                        <Button label=\"Reset Field\" handleClick={resetField} />\n                    </Box>\n                    <Box pl={2} pr={2} display=\"flex\" flexDirection=\"column\" alignItems=\"center\">\n                        <Button label=\"Random Walls\" handleClick={generateWalls} />\n                    </Box>\n                    <Box pl={2} pr={2} display=\"flex\" flexDirection=\"column\" alignItems=\"center\">\n                        <Button label=\"Create Maze\" handleClick={() => {createMaze(51, 48, 13, true);}} />\n                    </Box>\n                    <Box pl={2} pr={2} display=\"flex\" flexDirection=\"column\" alignItems=\"center\">\n                        <ButtonAccent handleClick={() => {\n                            if (activeAlgo.id === -1) {\n                                (document.getElementsByClassName(\"pathfinding-algoOptions\") as HTMLCollectionOf<HTMLElement>)[0].style.border = \"2px solid red\";\n                                return;\n                            }\n                            (document.getElementsByClassName(\"pathfinding-algoOptions\") as HTMLCollectionOf<HTMLElement>)[0].style.border = \"none\";\n                            findThePath(start, finish, false);\n                        }} type=\"error\" label=\"Find the path!\" />\n                    </Box>\n                </div>\n            </div>\n        </Box>\n    );\n}\n\nexport default React.memo(PathFindingVisualizer);","export default __webpack_public_path__ + \"static/media/one.98bfec9f.mp4\";","export default __webpack_public_path__ + \"static/media/two.86486bbb.mp4\";","export default __webpack_public_path__ + \"static/media/three.c45ca0e9.mp4\";","export default __webpack_public_path__ + \"static/media/four.2e808b57.mp4\";","export default __webpack_public_path__ + \"static/media/five.57d1e68b.mp4\";","export default __webpack_public_path__ + \"static/media/six.8164958c.mp4\";","export default __webpack_public_path__ + \"static/media/seven.0f42523e.mp4\";","export default __webpack_public_path__ + \"static/media/eight.9b3f4ccb.mp4\";","export default __webpack_public_path__ + \"static/media/nine.6fded1e1.mp4\";","import {Box} from '@material-ui/core';\nimport {useState, useRef} from 'react';\n\nimport one from '../../assets/tutorials/one.mp4';\nimport two from '../../assets/tutorials/two.mp4';\nimport three from '../../assets/tutorials/three.mp4';\nimport four from '../../assets/tutorials/four.mp4';\nimport five from '../../assets/tutorials/five.mp4';\nimport six from '../../assets/tutorials/six.mp4';\nimport seven from '../../assets/tutorials/seven.mp4';\nimport eight from '../../assets/tutorials/eight.mp4';\nimport nine from '../../assets/tutorials/nine.mp4';\n\n\nexport default function UserGuideWindow (props: any) {\n\n    const [TUTORIAL_INTRO, SET_TUTORIAL_INTRO] = useState(true);\n\n    const TUTORIAL_DATA = useRef([\n        {\n            id: 0,\n            title: 'First, pick a sorting algorithm.',\n            source: one\n        },\n        {\n            id: 1,\n            title: \"Then, click sort to visualize the algorithm. Wait until it's  finish.\",\n            source: two\n        },\n        {\n            id: 2,\n            title: \"Once it's done, you can generate new array and pick another algorithm.\",\n            source: three\n        },\n        {\n            id: 3,\n            title: \"If you want a smaller or larger array, you can change its size or length.\",\n            source: four\n        },\n        {\n            id: 4,\n            title: \"If you want to visualize the algorithm clearly, make it slower by changing the sorting speed.\",\n            source: five\n        },\n        {\n            id: 5,\n            title: \"You can also change the order of arrangement to ascending or descending.\",\n            source: six\n        },\n        {\n            id: 6,\n            title: \"Now, let's move on to Searching Visualizer Tab\",\n            source: seven\n        },\n        {\n            id: 7,\n            title: \"Type an integer to be search, change the speed then click search.\",\n            source: eight\n        },\n        {\n            id: 8,\n            title: \"If linear search is too slow. Click stop\",\n            source: nine\n        },\n    ]);\n\n    const [ACTIVE_WINDOW, SET_ACTIVE_WINDOW] = useState(TUTORIAL_DATA.current[0]);\n\n    function changeWindow (n: number) {\n        const max = TUTORIAL_DATA.current.length;\n        const newIndex = ACTIVE_WINDOW.id + n;\n\n        if (newIndex < 0) SET_TUTORIAL_INTRO(true);\n        else if (newIndex === max) props.handleSkip();\n        else {\n            SET_ACTIVE_WINDOW(TUTORIAL_DATA.current[newIndex]);\n        }\n    }\n\n    function handleCheckBox (e: any) {\n        if (e.target.checked == true) {\n            localStorage.setItem('tutorialHidden', \"true\");\n        }\n    }\n\n    return (\n        <>\n            <Box hidden={!TUTORIAL_INTRO}>\n                <div className=\"user-guide-window\">\n                    <h1>Thank You!</h1>\n                    <h2>For Visiting Algo Visualizer</h2>\n                    <p>\n                        This visualization tool is designed to help beginner programmers\n                        visualize fundamental sorting, searching and visualizing an arbitrary code.\n                        Please take the short tutorial first if you're not yet familiar,\n                        otherwise, just skip.\n                    </p>\n                    <div>\n                        <button onClick={() => {SET_TUTORIAL_INTRO(false);}} >Start tutorial</button>\n                        <button onClick={props.handleSkip}>Skip for now</button>\n                    </div>\n                    <div className=\"dont-show-again\">\n                        <input type=\"checkbox\" id=\"checkbox-dont-show-again\" onClick={handleCheckBox} />\n                        &nbsp; Dont' show again\n                    </div>\n                </div>\n            </Box>\n\n            <Box hidden={TUTORIAL_INTRO}>\n                <div className=\"tutorials\">\n                    <span id=\"counter\"> {ACTIVE_WINDOW.id + 1}/{TUTORIAL_DATA.current.length} </span>\n                    <h1> {ACTIVE_WINDOW.title} </h1>\n                    <div className=\"content-container\">\n                        <video src={ACTIVE_WINDOW.source} loop autoPlay muted />\n                    </div>\n                    <div>\n                        <button className=\"tutorialbtn\" onClick={() => {changeWindow(-1);}} >back</button>\n                        <button className=\"tutorialbtn\" onClick={() => {changeWindow(1);}}> {(ACTIVE_WINDOW.id === TUTORIAL_DATA.current.length - 1 ? 'Finish' : 'Next')} </button>\n                    </div>\n                </div>\n            </Box>\n        </>\n    );\n}","import {useState, useEffect} from 'react';\nimport {Box} from '@material-ui/core';\nimport AppBar from './components/AppBar';\n\nimport SortingVisualizer from './components/visualizers/SortingVisualizer';\nimport SearchingVisualizer from './components/visualizers/searching/SearchingVisualizer';\nimport PathFindingVisualizer from './components/visualizers/pathFinding/PathFindingVisualizer';\nimport UserGuideWindow from './components/user-tutorial/UserGuideWindow';\n\nimport './sass/main.css';\n\nfunction App () {\n\n   const [currentOpenTab, set_currentOpenTab] = useState(0);\n   const [tutorialHidden, set_tutorialHidden] = useState(false);\n\n   useEffect(() => {\n      if (localStorage.getItem('tutorialHidden') !== null) set_tutorialHidden(true);\n   }, []);\n\n   function changeTab (n: number) {\n      set_currentOpenTab(n);\n   }\n\n   return (\n      <Box>\n         <AppBar handleChangeTab={changeTab} />\n\n         <Box hidden={tutorialHidden}>\n            <UserGuideWindow handleSkip={() => {set_tutorialHidden(true);}} />\n         </Box>\n\n         <Box\n            hidden={currentOpenTab !== 0}\n            mt={3}\n            className=\"f-color1\" >\n\n            <SortingVisualizer />\n         </Box>\n         <Box\n            hidden={currentOpenTab !== 1}\n            mt={3}\n            className=\"f-color1\" >\n\n            <SearchingVisualizer />\n         </Box>\n         <Box\n            hidden={currentOpenTab !== 2}\n            mt={3}\n            className=\"f-color1\" >\n\n            <PathFindingVisualizer />\n         </Box>\n      </Box>\n   );\n}\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}